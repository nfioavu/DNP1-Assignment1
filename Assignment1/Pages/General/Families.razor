@page "/families"
@namespace Assignment1.Pages.General
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Filters
@using Microsoft.AspNetCore.Mvc.Formatters
@using Assignment1.Data
@using Assignment1
@using System.Text
@using Assignment1.Data.FamilyMembersService
@inject IFamilyMembersService FamilyMembersService
@inject NavigationManager NavigationManager
<h3 xmlns="http://www.w3.org/1999/html"></h3>
<AuthorizeView Policy="MustBeAdmin">
<button class="btn btn-light" @onclick="ShowFamilyMembers"> Show all family members </button>
</AuthorizeView>
<table class="table">
    <thead>
    <tr>
        <th>Family Name</th>
        <th>Number of Adults</th>
        <th>Number of Children</th>
        <th>Number of Pets</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var items in families)
    {
        <tr>
            <td>@items.FamilyName</td>
            <td>@items.Adults.Count</td>
            <td>@items.Children.Count</td>
            <td>@items.Pets.Count</td>
        </tr>
    }
    </tbody>
</table>


<SfChart>
    <ChartPrimaryXAxis Title="Number of adults" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
    <ChartPrimaryYAxis Title="Number of children"></ChartPrimaryYAxis>
    <ChartSeriesCollection>
        <ChartSeries DataSource="@familiesChart" XName="adults" YName="children" Type="ChartSeriesType.Column">
            
        </ChartSeries>
    </ChartSeriesCollection>
</SfChart>

@code {
    private IList<Family> families;
    private IList<Family> familiesToShow;
    private IList<Adult> adults;

    private void filter(ChangeEventArgs changeEventArgs)
    {
        int? address = null;
        try
        {
            address = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e){}

        if (address != null)
        {
            familiesToShow = families.Where(f => f.StreetName.Equals(address)).ToList();
        }
        else
        {
            familiesToShow = families;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        families = FamilyMembersService.GetFamilies();
        familiesToShow = families;
    }

    private void showAllFamilies()
    {
        familiesToShow = families;
    }
    
    
    
    private void ShowFamilyMembers()
    {
        NavigationManager.NavigateTo("/familymembers");
    }

    public class FML
    {
        public int children;
        public int adults;
    }

    public List<FML> familiesChart = new List<FML>
    {
        new FML {children = 2, adults = 2},
        new FML {children = 2, adults = 1},
        new FML {children = 0, adults = 2},
        new FML {children = 4, adults = 2},
        
        new FML {children = 2, adults = 1},
        new FML {children = 2, adults = 2},
        new FML {children = 1, adults = 2},
        new FML {children = 1, adults = 1},
        
        new FML {children = 2, adults = 2},
        new FML {children = 2, adults = 1},
        new FML {children = 2, adults = 2},
        new FML {children = 6, adults = 2},
        
        new FML {children = 3, adults = 1},
        new FML {children = 2, adults = 2},
        new FML {children = 3, adults = 2},
        new FML {children = 1, adults = 2},
        
        new FML {children = 3, adults = 2},
        new FML {children = 3, adults = 2},
        new FML {children = 3, adults = 2},
        new FML {children = 3, adults = 1},
        
        new FML {children = 2, adults = 2},
        new FML {children = 5, adults = 1},
        new FML {children = 3, adults = 2},
        new FML {children = 3, adults = 2},
        new FML {children = 2, adults = 2},
    };

 

}